Equations can be solved by writing them in the 
form x=f(x), then using the iteration
           x_new=f(x_old)
The new value will be a better approximation to a root than the old
value if |df/dx| is less than unity when evaluated at the root.
We'll call this solution method "substitution."

The equation 
       x^3-10x+10=0
has a root near x=1.15 and another near x=2.42.  Write two programs
subs1.cpp and subs2.cpp. The first should use substitution that
converges successfully (for a sufficiently good first guess) in the
case of the root near 2.42; the second should converge successfully
for the root near 1.15.

Your programs should have the following features:

* Like every program you write, you should have comments 
making the program very clear to anyone reading the program.

* Your program should use the function facility of C++
so that your program could easily be adapted to find the
zero of 

* Your program should converge to the roots with enough
accuracy that |x^3-10x+10| is less than 1.0e-5

* Your programs should limit the number of iterations to 100.
(This is to keep a program from running incorrectly and not 
reaching a stop.)

* Your program should promt the user to put in a first guess
for the root. It should then print to the screen every subsequent
estimate of the root. It should also print to the screen the iteration
number.


* You will want to use #include<math.h> if you use mathematical
functions like "fabs"  (absolute value for floating point expressions)
or pow(x,y) (the function x^y).

* Here is an example. The executable is named "run1." The compilation 
and the output are shown.

hostname % g++ -o run1 subs1.cpp
hostname % run1
Enter initial guess
2.42
2.42156     1   
2.42245     2   
2.42296     3   
2.42325     4   
2.42341     5   
2.4235     6   
2.42355     7   
2.42358     8   
2.4236     9   
2.42361     10   
2.42362     11   
2.42362     12   
2.42362     13   
2.42362     14   
